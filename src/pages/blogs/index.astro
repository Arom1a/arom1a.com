---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";

interface Props {
  language: "en" | "zh";
}

const enBlogEntries = await getCollection("blogs", ({ slug }) => {
  return slug.startsWith("en/");
});
const zhBlogEntries = await getCollection("blogs", ({ slug }) => {
  return slug.startsWith("zh/");
});

let enDisplayBlogEntries = enBlogEntries;
const enIds = enBlogEntries.map((entry) => {
  return entry.data.id;
});
zhBlogEntries.forEach((entry) => {
  if (!enIds.includes(entry.data.id)) {
    entry.data.lackEnTranslation = true;
    enDisplayBlogEntries.push(entry);
  }
});

let zhDisplayBlogEntries = zhBlogEntries;
const zhIds = zhBlogEntries.map((entry) => {
  return entry.data.id;
});
enBlogEntries.forEach((entry) => {
  if (!zhIds.includes(entry.data.id)) {
    entry.data.lackZhTranslation = true;
    zhDisplayBlogEntries.push(entry);
  }
});

const enMonthMapToEntry = new Map();
enDisplayBlogEntries.forEach((entry) => {
  const yearAndMonth = // return yyyymm
    entry.data.pubDate.getFullYear().toString() +
    (entry.data.pubDate.getMonth().toString().length < 2
      ? "0" + (entry.data.pubDate.getMonth() + 1).toString()
      : entry.data.pubDate.getMonth().toString());
  const date =
    entry.data.pubDate.getDate().toString().length < 2
      ? "0" + entry.data.pubDate.getDate().toString()
      : entry.data.pubDate.getDate().toString();

  enMonthMapToEntry.set(
    yearAndMonth,
    enMonthMapToEntry.get(yearAndMonth)
      ? enMonthMapToEntry.get(yearAndMonth).concat(entry)
      : [entry]
  );
});

const zhMonthMapToEntry = new Map();
zhDisplayBlogEntries.forEach((entry) => {
  const yearAndMonth = // return yyyymm
    entry.data.pubDate.getFullYear().toString() +
    (entry.data.pubDate.getMonth().toString().length < 2
      ? "0" + (entry.data.pubDate.getMonth() + 1).toString()
      : entry.data.pubDate.getMonth().toString());
  const date =
    entry.data.pubDate.getDate().toString().length < 2
      ? "0" + entry.data.pubDate.getDate().toString()
      : entry.data.pubDate.getDate().toString();

  zhMonthMapToEntry.set(
    yearAndMonth,
    zhMonthMapToEntry.get(yearAndMonth)
      ? zhMonthMapToEntry.get(yearAndMonth).concat(entry)
      : [entry]
  );
});

const pubMonths = [...enMonthMapToEntry.keys()].sort((a, b) => b - a);

const totalArticleNum = enBlogEntries.length + zhBlogEntries.length;
const totalBlogNum = enDisplayBlogEntries.length;
---

<BaseLayout>
  <ul id="en-list">
    {
      pubMonths.map((month) => (
        <li>
          <div class="monthdiv(year) text-3xl text-blue-400">{month}</div>
          {enMonthMapToEntry.get(month).map((entry: (typeof enBlogEntries)[0]) => (
            <p>
              <a
                href={`/blogs/${entry.slug}`}
                class={`text-xl ${entry.data.lackEnTranslation ? "text-purple-300" : ""}`}
              >
                {entry.data.title}
              </a>
              {entry.slug}
            </p>
          ))}
        </li>
      ))
    }
  </ul>

  <ul id="zh-list">
    {
      pubMonths.map((month) => (
        <li>
          <div class="monthdiv(year) text-3xl text-blue-400">{month}</div>
          {zhMonthMapToEntry.get(month).map((entry: (typeof enBlogEntries)[0]) => (
            <p>
              <a
                href={`/blogs/${entry.slug}`}
                class={`text-xl ${entry.data.lackZhTranslation ? "text-purple-300" : ""}`}
              >
                {entry.data.title}
              </a>
              {entry.slug}
            </p>
          ))}
        </li>
      ))
    }
  </ul>
</BaseLayout>
